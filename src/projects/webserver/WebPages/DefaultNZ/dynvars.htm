~#gf:header.inc~
<div id="content">

<h1>Tags and Dynamic Variables</h1>
<p>One of the most basic needs is to provide status information back to the user of 
your web application. This can be achieved with the following methods.
<ul>
  <li>The new method implemented in the Netcruzer Webserver.</li>
  <li>The Microchip dymanic variable method. This method is more complicated. It requires the
	firmware to be rebuilt using the "HTTPPrint.h" file generated by the
	<a target="_blank" href="http://www.netcruzer.com/webpagegen">Webpage Generator</a>.</li>
</ul>

<h2>Netcruzer Dynamic Variables (Tags)</h2>
<p>Dynamic variables are called tags in the Netcruzer Webserver. Many tags are implemented by default,
as <a target="_blank" href="http://www.netcruzer.com/project-webserver-tags">listed here</a>.
Adding additional tags is very easy, and is done by implementing a callback function in code.
See the processTag() callback function in the main.c file of the Webserver source code(contained in
the <a target="_blank" href="http://www.netcruzer.com/nzdownload"> Netcruzer Download</a>) for examples.</p>
<p>To insert a <i>Netcruzer Tags</i>, place the tag name preceded by the hash(#) character inside two tilde
(<code>~~</code>) characters, like this: <code>~~#myVariable~~</code>.  When this 
sequence is found, the server will search for the given tag in it's list of
<a target="_blank" href="http://www.netcruzer.com/project-webserver-tags">default tag</a>.
If not found, it will call the processTag() callback function(if defined).</p>
<p>For example, the build date of the HEX file programmed in your part is defined as the <code>gfd</code>
<a target="_blank" href="http://www.netcruzer.com/project-webserver-tags">default tag</a>. To display it on a web
page, simply place the <code>~~#gfd~~</code> string in your HTML page, and it will be replaced by the build date. For example:</p>
<div class="examplebox code">~#gfd~</div>
<p>The following example shows how to display the current state of LEDs 1 to 8. We use the tags <code>~~#xled1~~</code>
to <code>~~#xled8~~</code>. These tags are processed in our processTag() callback function. We do a string compare for "xled",
and if found, get the value of the number following "xled". For this example, we return '0' or '1' representing the state of the requested LED.
This is a way of parameter passing.</p>
<p>The following examples uses the tags <code>~~#xled1~~</code> to <code>~~#xled8~~</code> to indicate the state of LEDs 1 to 8 of the DB66DEV1 board:</p>
<div class="examplebox code" style="letter-spacing: 10px">
~#xled1~ ~#xled2~ ~#xled3~ ~#xled4~ ~#xled5~ ~#xled6~ ~#xled7~ ~#xled8~
</div>


<h2>Microchip Dynamic Variables</h2>
This method is described in detail in the Microchip TCP/IP documentation, available for
download <a target="_blank" href="http://www.netcruzer.com/project-webserver">here</a>.
The HTTP server provides <i>dynamic variable substitution callbacks</i>. These commands in your HTML code will
alert the server to execute a callback function at that point.</p>
<p>To insert a dynamic variable, place the name of the variable inside of the tilde
(<code>~~</code>) character, like this: <code>~~myVariable~~</code>.  When that 
sequence is found, the server will call the function <code>HTTPPrint_myVariable()</code>.</p>

<p>For example, here's the build date of the HEX file programmed in your part:</p>

<div class="examplebox code">~builddate~</div>

<p>You can also pass parameters to dynamic variables by placing numeric values inside 
of parenthesis after the variable name.  <code>~~#xled2~~</code> will print the value
of the second LED.  The numeric values are passed as WORD values to your callback function.
You can pass as many parameters as you wish to these functions, and if your C code has 
constants defined, those will be parsed as well. <b>Note</b> that a <code>HTTPPrint_xxx(n)</code>
function is required for each different parameter! This is not practical if many parameters will
be used, and the <i>Netcruzer Dynamic Variable</i> method should be used in stead!</p>

<p>As an example, here is a binary representation showing the state of LEDs 7 and 8:</p>
<div class="examplebox code" style="letter-spacing: 10px">
~led(7)~ ~led(8)~
</div>

<p>For short outputs (less than 16 bytes) you need only to call the appropriate 
<code>TCPPut</code> function and return.  For longer outputs the output state must be 
managed through successive calls, which prevents the limited buffer space from being 
overrun.</p>
<p>As an example, here is the current LCD display (which uses 32 bytes):</p>

<div class="examplebox code">~lcdtext~</div>

<p>You can also use dynamic variables to include files.  This is useful to save 
storage space for your pages, since a portion of most pages (header, menu, footer) 
do not change.  By placing <code>~~inc&#058;filename.inc~~</code> in your HTML code, 
the file <code>filename.inc</code> will be read and inserted at this location.</p>
<p>Dynamic variables are non-recursive, so variables located inside files included
in this manner are not parsed. If an include file should have a dynamic variable, create
a &lt;span&gt; element with the ID identifying the variable. Then, add JavaScript in
the file this included file will be placed in, that replaces this span with the actual 
dynamic variable. </p>
</div>

<script type="text/javascript">
var msg = "~#gc:name~";
if (msg != "NA")
  $('#hello').html("Welcome, "+msg+"!");
</script>
~#gf:footer.inc~